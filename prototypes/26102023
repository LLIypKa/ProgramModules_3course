Prototype (Прототип) — порождающий паттерн.

Частота использования: средняя.

Назначение: задает виды создаваемых объектов с помощью экземпляра-прототипа и создает новые объекты путем копирования («клонирования») этого прототипа.

Участники:

• Prototype (Прототип) — объявляет интерфейс для клонирования самого себя;

• ConcretePrototype (Конкретный прототип) — реализует операцию клонирования себя;

• Client (Клиент) — создает новый объект, обращаясь к прототипу с запросом клонировать себя.

Задание 1. Реализовать иерархию классов, которая содержит абстрактный прототип Prototype и два конкретных прототипа ConcretePrototype1 и ConcretePrototype2. Все классы включают метод Clone без параметров, возвращающий копию объекта, вызвавшего данный метод, а также методы GetInfo и ChangeId. Метод GetInfo без параметров возвращает строку, метод ChangeId имеет целочисленный параметр id и ничего не возвращает. В классе Prototype методы Clone, GetInfo и ChangeId являются абстрактными. Конкретные прототипы содержат строковое поле data и целочисленное поле id, которые инициализируются одноименными параметрами конструктора. Метод GetInfo для конкретных прототипов возвращает строку, содержащую краткое имя типа («CP1» для типа ConcretePrototype1 и «CP2» для типа ConcretePrototype2) и значения полей data и id (части описания разделяются символом «=», например, «CP1=TEXT=34»). Метод ChangeId изменяет значение поля id. При реализации метода Clone можно использовать специальные средства стандартной библиотеки или обычный вызов конструктора.

Также реализовать класс Client, предназначенный для работы с группой объектов типа ConcretePrototype1 или ConcretePrototype2. Конструктор класса Client имеет параметр-ссылку типа Prototype, определяющий прототип объектов, включаемых в группу (прототип в группу не входит и сохраняется в специальном поле prot; для хранения группы объектов удобно использовать динамическую структуру). Класс Client также содержит методы Operation(id) и GetObjects. Метод Operation добавляет в набор новый объект, получаемый путем клонирования прототипа и последующего изменения поля id полученного объекта в соответствии со значением параметра метода Operation. Метод GetObjects без параметров возвращает строку с описанием всех объектов группы (описания разделяются пробелом). Все объекты создаваемой группы имеют одно и то же поле data и различные поля id (задаваемые в методе Operation).

Тестирование разработанной системы классов. Дана строка S, целое число N (≤ 10) и набор из N целых чисел. Вызывая метод Operation для двух объектов класса Client, сформировать два набора из N объектов. Первый набор содержит объекты типа ConcretePrototype1 (и создается первым объектом Client), второй набор содержит объекты типа ConcretePrototype2 (и создается вторым объектом Client). Все созданные объекты должны иметь одинаковые поля data, равные строке S, и значения полей id, взятые из исходного набора целых чисел. Используя метод GetObjects, вывести строковые описания каждого из полученных наборов объектов.

Примечание. В реальной ситуации подход, основанный на паттерне «Прототип» будет эффективным, если объем действий по обычному созданию объекта превосходит объем действий по его клонированию и последующей настройке некоторых свойств.
