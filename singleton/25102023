Singleton (Одиночка) — порождающий паттерн.

Частота использования: выше средней.

Назначение: гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа.

Участники:

• Singleton (Одиночка) — определяет операцию Instance, которая позволяет клиентам получать доступ к единственному экземпляру (операция Instance обычно оформляется в виде статического, т. е. классового, метода); может обеспечивать отложенную инициализацию данного экземпляра.

Чтобы проиллюстрировать особенности паттерна Singleton, в задании предлагается реализовать не только его стандартный вариант, но и основанные на той же идее варианты, допускающие использование ограниченного количества экземпляров.

Задание 1. Реализовать иерархию классов, включающую абстрактный базовый класс BaseClass и классы-потомки Singleton, Doubleton и Tenton, обеспечивающие создание ограниченного количества своих экземпляров.

Класс BaseClass включает целочисленное поле data и два связанных с ним метода: метод IncData(increment) увеличивает значение data на величину целочисленного параметра increment, метод GetData без параметров возвращает текущее значение поля data. Поле data инициализируется нулевым значением.

Класс Singleton реализует стандартный паттерн «Одиночка». Он включает статическое поле uniqueInstance — ссылку на тип Singleton (инициализируется нулевой ссылкой), закрытый конструктор, не выполняющий дополнительных действий, и статический метод Instance без параметров, который возвращает ссылку на объект типа Singleton). Метод Instance выполняет следующие действия: если поле uniqueInstance является нулевой ссылкой, то метод создает объект Singleton, помещает ссылку на него в поле uniqueInstance и возвращает эту ссылку как результат своей работы; если поле uniqueInstance уже содержит ссылку на объект Singleton, то метод Instance просто возвращает эту ссылку. Дополнительно реализовать статический метод InstanceCount (без параметров), который возвращает 0, если поле uniqueInstance содержит нулевую ссылку, и 1 в противном случае.

Классы Doubleton и Tenton реализуют вариант паттерна, допускающий использование не более двух и не более десяти экземпляров соответственно.

Класс Doubleton включает статический массив instances из двух элементов-ссылок типа Doubleton (элементы инициализируются нулевыми значениями), закрытый конструктор и статические методы Instance1 и Instance2, которые выполняют действия, аналогичные действиям метода Instance класса Singleton, но обращаются соответственно к элементам массива instances с индексами 0 и 1.

Класс Tenton отличается от класса Doubleton тем, что его статический массив instances содержит 10 элементов-ссылок типа Tenton, а вместо двух методов Instance1 и Instance2 он включает статический метод Instance(index) с целочисленным параметром, определяющим индекс элемента массива instances, к которому обращается данный метод. Если параметр находится вне диапазона 0–9, то метод Instance может возвращать нулевую ссылку или возбуждать исключение (при выполнении задания такая ситуация не будет возникать).

В классах Doubleton и Tenton дополнительно реализовать статический метод InstanceCount (без параметров), который возвращает количество элементов массива instances, не являющихся нулевыми ссылками.

Тестирование разработанной системы классов. Дано целое число N (≤ 10) и набор из N строк, которые могут принимать значения «S», «D1», «D2», «T0», «T1», …, «T9». Создать массив b из N элементов — ссылок на BaseClass и инициализировать его элементы экземплярами классов Singleton, Doubleton, Tenton, используя следующие варианты статических методов в зависимости от значения соответствующей строки из исходного набора: для строки «S» используется метод Instance класса Singleton; для строк «D1», «D2» — соответственно методы Instance1 и Instance2 класса Doubleton; для строк «T0», «T1», …, «T9» — метод Instance(index) класса Tenton с параметром index, соответствующим цифре, указанной в строке.

После создания всех элементов массива b вывести значения метода InstanceCount для классов Singleton, Doubleton, Tenton в указанном порядке.

Также дано целое число K (≤ 20) и набор из K пар целых чисел (index, increment), в котором число index находится в диапазоне от 0 до N − 1 и определяет индекс элемента в массиве b, а число increment определяет параметр метода IncData, который надо вызвать для элемента массива b с индексом index. После вызова всех требуемых методов IncData вывести итоговые значения поля data для всех объектов массива b, используя метод GetData.
