Задание 4

************************
Abstract Factory (Абстрактная фабрика) — порождающий паттерн.

Известен также под именем Kit (Инструментарий).

Частота использования: высокая.

Назначение: предоставляет интерфейс для создания семейств взаимосвязанных или взаимозависимых объектов, не специфицируя конкретные классы этих объектов. Методы абстрактной фабрики обычно реализуются как фабричные методы 



Участники:

• AbstractFactory (Абстрактная фабрика) — объявляет интерфейс для операций, создающих абстрактные объекты-продукты;

• ConcreteFactory (Конкретная фабрика) — реализует операции, создающие конкретные объекты-продукты;

• AbstractProduct (Абстрактный продукт) — объявляет интерфейс для типа объекта-продукта;

• ConcreteProduct (Конкретный продукт) — определяет объект-продукт, создаваемый соответствующей конкретной фабрикой; реализует интерфейс AbstractProduct;

• Client (Клиент)  — пользуется исключительно интерфейсами, которые объявлены в классах AbstractFactory и AbstractProduct.

Реализовать три иерархии классов, в одну из которых входят абстрактная фабрика AbstractFactory и две конкретные фабрики ConcreteFactory1 и ConcreteFactory2, в другую — абстрактный продукт (типа A) AbstractProductA и два его потомка ProductA1 и ProductA2, а в третью — абстрактный продукт (типа B) AbstractProductB и два его потомка ProductB1 и ProductB2. Все фабрики включают методы CreateProductA и CreateProductB, конкретные фабрики 1 и 2 возвращают конкретные продукты с соответствующим номером (фабрика 1 возвращает продукты ProductA1 и ProductB1, фабрика 2 — продукты ProductA2 и ProductB2).

Все классы-продукты имеют метод GetInfo, возвращающий строковое значение. Кроме того, в продукте первого типа определен метод A без параметров, а в продукте второго типа — метод В с параметром типа AbstractProductA (методы не возвращают значений). Конкретные продукты содержат строковое поле info, которое инициализируется в конструкторе с помощью его параметра целого типа (в поле info записывается строковое представление целочисленного параметра конструктора). Метод GetInfo конкретных классов-продуктов возвращает текущее значение поля info.

Для класса-продукта ProductA1 метод A переводит поле info в целое число, удваивает его и сохраняет строковое представление результата в поле info; для класса-продукта ProductA2 метод A просто удваивает строку info (например, строка «123» преобразуется в строку «123123»).

Для класса-продукта ProductB1 вызов objB.B(objA) преобразует поля objB.info и objA.info в целые числа, складывает их и сохраняет строковое представление результата в поле objB.info; для класса-продукта ProductB2 вызов objB.B(objA) добавляет в конец строки objB.info строку objA.info и сохраняет результат в поле objB.info.

Тестирование разработанной системы классов. Дано целое число Nf, которое может быть равно 1 или 2, целые числа Na и Nb и строка S, содержащая символы «A» и «B». Описать ссылочные переменные f типа AbstractFactory, pa типа AbstractProductA и pb типа AbstractProductB. Если число Nf равно 1, то связать f с конкретной фабрикой 1, если Nf равно 2, то связать f с конкретной фабрикой 2. Используя фабричные методы созданной фабрики, создать конкретные продукты типа A и B, инициализировав их данными числами Na и Nb соответственно, и связать их с переменными pa и pb. Затем для созданных продуктов pa и pb выполнить методы A и B в порядке, указанном в исходной строке S. При этом метод A должен вызываться для продукта pa, а метод B — для продукта pb, причем параметром метода B должен быть продукт pa. Используя методы GetInfo, вывести итоговые значения объектов-продуктов pa и pb (в указанном порядке).

Примечание. При выполнении задания используются только ссылки на абстрактные классы, а также только методы, определенные в абстрактных классах (за исключением конструктора создаваемой конкретной фабрики), что и составляет суть паттерна «Абстрактная фабрика».
