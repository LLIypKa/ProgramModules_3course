Composite (Компоновщик) — структурный паттерн.

Частота использования: выше средней.

Назначение: компонует объекты в древовидные структуры для представления иерархий «часть-целое». Позволяет клиентам единообразно трактовать индивидуальные и составные объекты.

Участники:

• Component (Компонент) — объявляет интерфейс для компонуемых объектов; предоставляет подходящую реализацию операций по умолчанию, общую для всех классов; объявляет интерфейс для доступа к дочерним компонентам и управления ими;

• Leaf (Лист) — представляет листовой узел композиции, не имеющий потомков;

• Composite (Составной объект) — хранит дочерние компоненты составного узла; реализует относящиеся к управлению потомками операции в интерфейсе класса Component;

• Client (Клиент) — манипулирует объектами композиции через интерфейс Component.

Объекты-листы и составные объекты могут также содержать дополнительные методы, определяющие их особое поведение, однако паттерн Composite ориентирован прежде всего на применение тех методов, которые являются общими у всех объектов композиции (хотя и реализуются по-разному для листов и составных объектов).

Задание 1. Реализовать иерархию классов, включающую абстрактный класс Component с методами AddComponent и Operation и конкретные классы Leaf и Composite. Метод AddComponent с параметром-ссылкой c типа Component добавляет компонент c в набор дочерних компонентов (имеет смысл только для класса Composite; для класса Leaf не выполняет никаких действий), метод Operation возвращает строковое представление данного компонента и всех его потомков (при наличии). В классе Component метод AddComponent не выполняет никаких действий, а метод Operation является абстрактным.

Классы Composite и Leaf содержат символьное поле data; метод Operation класса Leaf возвращает это поле (преобразованное к строковому типу), метод Operation класса Composite возвращает строку, начинающуюся с символа data, после которого стоит открывающая круглая скобка «(», затем указываются данные, полученные методом Operation для каждого дочернего компонента (без пробелов), а затем указывается закрывающая круглая скобка «)». Класс Composite хранит свои дочерние компоненты в структуре данных children (например, массиве) с элементами-ссылками типа Component (можно считать, что любой объект типа Composite содержит не более 15 дочерних компонентов). Конструктор классов Leaf и Composite содержит один символьный параметр, которым инициализируется поле data.

Тестирование разработанной системы классов. Дано целое число N (≤ 15) и набор из N символов, являющихся прописными или строчными латинскими буквами. Создать набор данных comp (например, массив) из N ссылок на объекты Component и заполнить этот набор, создавая для каждой прописной буквы из исходного набора символов объект типа Composite, а для каждой строчной буквы — объект типа Leaf, и указывая эту букву в качестве параметра конструктора объекта.

Кроме того, дан набор из N целых чисел, определяющих связи между объектами набора comp: число с индексом K (K = 0, …, N − 1) определяет индекс родительского объекта для объекта с индексом K (при этом гарантируется, что родительский объект обязательно имеет тип Composite). Если объект не имеет родителя, то соответствующий элемент в исходном наборе чисел равен −1. Если несколько объектов имеют общего родителя, то они должны добвляться к нему в порядке их следования в наборе comp. Используя данные из исходного набора чисел и вызывая метод AddComponent для требуемых объектов типа Composite, установить связи между объектами набора comp. Затем, перебирая объекты из набора comp с порядке возрастания их индексов, вызвать для каждого из них метод Operation и вывести возвращаемое этим методом строковое описание объекта.
