Observer (Наблюдатель) — паттерн поведения.

Известен также под именем Publish-Subscribe (Издатель-Подписчик).

Частота использования: высокая.

Назначение: определяет зависимость типа «один-ко-многим» между объектами таким образом, что при изменении состояния одного объекта все зависящие от него объекты-наблюдатели оповещаются об этом событии.

Участники:

• Subject (Субъект) — располагает информацией о своих наблюдателях (за субъектом может следить любое число наблюдателей); предоставляет интерфейс (и, как правило, реализацию) для присоединения и отсоединения наблюдателей;

• Observer (Наблюдатель) — определяет интерфейс обновления для объектов, которые должны быть уведомлены об изменении субъекта;

• ConcreteSubject (Конкретный субъект) — сохраняет состояние, представляющее интерес для конкретного наблюдателя ConcreteObserver; посылает информацию своим наблюдателям, когда происходит изменение;

• ConcreteObserver (Конкретный наблюдатель) — хранит ссылку на объект класса ConcreteSubject; сохраняет данные, которые должны быть согласованы с данными субъекта.

Описываемый вариант паттерна Observer, при котором наблюдатель лишь уведомляется об изменении состояния субъекта и должен сам получить информацию о его новом состоянии, обратившись непосредственно к субъекту, называется моделью вытягивания (pull model).
***************************************************



Задание 1. Реализовать две иерархии классов. Первая иерархия включает базовый класс Subject с конкретными методами Attach(observ), Detach(observ) и Notify и класс-потомок ConcreteSubject. Методы Attach и Detach имеют параметр-ссылку типа Observer и не возвращают значений. Метод Notify не имеет параметров и не возвращает значения; он является защищенным.

В классе Subject дополнительно описать поле observers. Это поле является структурой данных с элементами-ссылками типа Observer, в которой хранятся все наблюдатели, присоединенные в настоящий момент к субъекту (можно считать, что наблюдателей не более 10). В качестве такой структуры удобно использовать динамическую структуру, имеющую команды для добавления и удаления элементов. Метод Attach(observ) добавляет объект observ в структуру observers, метод Detach(observ) удаляет объект observ из данной структуры. В методе Notify выполняется перебор элементов структуры observers: для каждого элемента структуры вызывается его метод Update. При реализации метода Notify необходимо учесть ситуацию, когда во время выполнения метода Update некоторые наблюдатели отсоединятся от субъекта, что приведет к изменению структуры данных observers.

В классе ConcreteSubject описать поле state, которое имеет символьный тип и моделирует текущее состояние субъекта. С ним связаны два метода. Метод SetState(st) имеет символьный параметр st; если этот параметр не равен текущему значению поля state, то метод изменяет поле state, присваивая ему значение параметра st, и дополнительно вызывает метод Notify; если параметр st совпадает с текущим значением поля state, то метод SetState не выполняет никаких действий. Метод GetState (без параметров) возвращает текущее значение поля state. Конструктор класса ConcreteSubject не имеет параметров, поле state инициализируется символом «пробел».

Вторая иерархия включает абстрактный класс Observer с абстрактным методом Update (не имеет параметров и не возвращает значения) и конкретный класс ConcreteObserver, имеющий строковое поле log, символьное поле detachInfo, поле subj — ссылку на объект типа ConcreteSubject, а также методы Attach, Detach и GetLog. Конструктор класса ConcreteObserver имеет параметры subj и detachInfo, которые инициализируют соответствующие поля; поле log инициализируется пустой строкой. Методы Attach и Detach не имеют параметров и не возвращают значения. В методе Attach выполняется вызов метода Attach объекта subj, в методе Detach выполняется вызов метода Detach объекта subj, причем в качестве параметра в обоих вызываемых методах передается ссылка на объект ConcreteObserver, инициировавший вызов этих методов. Метод GetLog не имеет параметров и возвращает значение поля log.

Метод Update, переопределяемый в классе ConcreteObserver, является основным методом, обеспечивающим взаимодействие между конкретным субъектом и конкретным наблюдателем. Именно этот метод вызывается конкретным субъектом при изменении его состояния. Таким образом, его вызов означает, что состояние конкретного субъекта изменилось, и наблюдатель может узнать это новое состояние, вызвав в методе Update метод GetState объекта subj. В данном задании в методе Update надо выполнить следующие дополнительные действия: добавить символ, полученный методом GetState, в конец поля log объекта ConcreteObserver, для которого был вызван метод Update, и, кроме того, если полученный символ совпадает со значением поля detachInfo, то немедленно отсоединить наблюдателя ConcreteObserver от субъекта subj, вызвав метод Detach наблюдателя.

Тестирование разработанной системы классов. Дано целое число N (≤ 10) и строка S, содержащая заглавные латинские буквы. Создать объект subj типа ConcreteSubject и коллекцию (например, массив) observers из N объектов типа ConcreteObserver, указав в качестве первого параметра конструктора объектов ConcreteObserver ссылку на объект subj, а в качестве второго параметра — заглавные латинские буквы, перебирая их в алфавитном порядке («A» для первого объекта коллекции observers, «B» для второго объекта и т. д.). Для каждого объекта ConcreteObserver вызвать его метод Attach. Затем для каждого символа из данной строки S вызвать метод SetState объекта subj, передав методу этот символ в качестве параметра. После обработки всех символов строки S вывести значения полей log объектов из коллекции observers, используя метод GetLog класса ConcreteObserver. Выведенные строки будут содержать все начальные символы строки S (без одинаковых соседних символов) вплоть до того символа, который вызвал отсоединение наблюдателя от объекта subj.

Примечание (C#). В языке C# для реализации паттерна Observer удобно использовать делегаты и события. В нашем случае можно удалить структуру данных observers и методы Attach и Detach из класса Subject, описать в классе Subject делегат public delegate void NotifyEventHandler() и событие public event NotifyEventHandler OnNotify и определить метод Notify следующим образом if (OnNotify != null) OnNotify();
В классе ConcreteObserver методы Attach и Detach будут содержать единственный оператор: subj.OnNotify += Update и subj.OnNotify -= Update соответственно.

[C#]

public class Subject
{
    // Add the required field
    public virtual void Attach(Observer observ)
    {
    // Implement the method
    }
    public virtual void Detach(Observer observ)
    {
    // Implement the method
    }
    protected virtual void Notify()
    {
    // Implement the method
    }
}

// Implement the ConcreteSubject descendant class

public abstract class Observer
{
    public abstract void Update();
}

// Implement the ConcreteObserver descendant class
=================================

Задание 2. Реализовать вариант взаимодействия субъектов и наблюдателей, не требующий специальных методов доступа к состоянию субъекта и упрощающий взаимодействие наблюдателя с несколькими субъектами.

При таком варианте взаимодействия наблюдатель сразу получает значение нового состояния субъекта и поэтому наблюдателю не требуется обращаться к субъекту за получением дополнительной информации. Подобная модель взаимодействия называется моделью проталкивания (push model).

Первая иерархия классов включает базовый класс Subject с конкретными методами Attach(observ), Detach(observ), Notify(info) и класс-потомок ConcreteSubject. Методы Attach и Detach имеют параметр-ссылку типа Observer и не возвращают значений. Метод Notify имеет строковый параметр, не возвращает значения и является защищенным. В классе Subject дополнительно описать поле observers — структуру данных с элементами-ссылками типа Observer, в которой хранятся все наблюдатели, присоединенные в настоящий момент к субъекту (можно считать, что наблюдателей не более 10). В качестве такой структуры удобно использовать динамическую структуру, имеющую команды для добавления и удаления элементов.

Метод Attach(observ) добавляет объект observ в структуру observers, метод Detach(observ) удаляет объект observ из данной структуры. В методе Notify(info) выполняется перебор элементов структуры observers и для каждого элемента этой структуры вызывается его метод OnInfo(sender, info), причем в качестве параметра info указывается параметр метода Notify, а в качестве параметра sender — ссылка на объект Subject, вызвавший метод Notify. Таким образом, наблюдатель сразу информируется и о наступившем событии, получая информацию в параметре info, и о субъекте sender, который инициировал это событие. При реализации метода Notify необходимо учесть ситуацию, когда некоторые наблюдатели в своем методе OnInfo отсоединятся от субъекта, что приведет к изменению структуры данных observers.

В классе ConcreteSubject описать поле state, которое имеет строковый тип и моделирует текущее состояние субъекта. С ним связан метод SetState(st), имеющий строковый параметр st. Если этот параметр не равен текущему значению поля state, то метод изменяет поле state, присваивая ему значение параметра st, и дополнительно вызывает метод Notify(state); если параметр st совпадает с текущим значением поля state, то метод SetState не выполняет никаких действий. Конструктор класса ConcreteSubject не имеет параметров, поле state инициализируется пустой строкой.

Вторая иерархия включает абстрактный класс Observer с абстрактным методом OnInfo(sender, info) и класс-потомок ConcreteObserver. Параметр sender метода OnInfo является ссылкой на объект типа Subject, параметр info — строковый. Класс ConcreteObserver дополнительно имеет строковое поле log и символьное поле detachInfo, а также методы Attach, Detach и GetLog. Конструктор класса ConcreteObserver имеет параметр detachInfo, который инициализирует соответствующее поле; поле log инициализируется пустой строкой. Методы Attach(subj) и Detach(subj) имеют параметр-ссылку типа Subject и не возвращают значений. В методе Attach выполняется вызов метода Attach объекта subj, в методе Detach выполняется вызов метода Detach объекта subj, причем в качестве параметра в обоих вызываемых методах передается ссылка на объект ConcreteObserver, инициировавший вызов этих методов. Метод GetLog не имеет параметров и возвращает значение поля log.

Метод OnInfo(sender, info), переопределяемый в классе ConcreteObserver, является основным методом, обеспечивающим взаимодействие между конкретным субъектом и конкретным наблюдателем. Напомним, что этот метод вызывается конкретным субъектом для информирования всех присоединенных к нему в настоящий момент наблюдателей, причем информация передается в поле info, а поле sender содержит ссылку на субъект, передавший эту информацию. В данном задании в методе OnInfo надо выполнить следующие действия: добавить содержимое параметра info в конец строки log объекта ConcreteObserver, для которого был вызван метод OnInfo, и, кроме того, если последний символ строки info совпадает со значением поля detachInfo объекта ConcreteObserver, то необходимо отсоединить этого наблюдателя от субъекта sender, вызвав метод Detach объекта ConcreteObserver с параметром sender.

Тестирование разработанной системы классов. Дано целое число N (≤ 10). Кроме того, дано целое число K (≤ 45) и набор двухсимвольных строк, первым символом которых является цифра «1» или «2», а вторым — строчная латинская буква. Создать два объекта subj1 и subj2 типа ConcreteSubject и коллекцию (например, массив) observers из N объектов типа ConcreteObserver, указывая в качестве параметра detachInfo конструктора объектов ConcreteObserver строчные латинские буквы, которые перебираются в алфавитном порядке («a» для первого объекта коллекции observers, «b» для второго объекта и т. д.). Для каждого объекта ConcreteObserver вызвать методы Attach с параметрами-ссылками на объекты subj1 и subj2. Затем для каждой строки из данного набора строк вызвать метод SetState объекта subj1 или subj2, передав эту строку в качестве параметра, причем если строка начинается с цифры «1», то метод SetState должен вызываться для объекта subj1, а если с цифры «2», то для объекта subj2. После обработки всех строк из исходного набора вывести значения полей log объектов из коллекции observers, используя метод GetLog класса ConcreteObserver. Выведенные строки будут содержать все данные, переданные наблюдателям субъектами subj1 и subj2 (без одинаковых соседних данных), вплоть до тех, которые вызвали отсоединение наблюдателя от соответствующего субъекта.




